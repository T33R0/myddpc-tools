/* global jQuery, myddpc_build_list_settings */ // Assuming settings passed via wp_localize_script
jQuery(document).ready(function($) {

    // --- Configuration ---
    // Access max custom parts limit passed from PHP if needed
    const maxCustomParts = (typeof myddpc_build_list_settings !== 'undefined' && myddpc_build_list_settings.max_custom_parts)
                           ? parseInt(myddpc_build_list_settings.max_custom_parts, 10)
                           : 10; // Default to 10 if not passed

    // --- Function to show/hide brand input based on dropdown selection ---
    function toggleBrandInput(selectElement) {
        const selectedValue = $(selectElement).val();
        // Find the sibling wrapper div for the brand input
        const brandInputWrapper = $(selectElement).siblings('.brand-input-wrapper');

        if (selectedValue && selectedValue !== "") {
            // If a non-stock/empty option is selected, show the brand input
            brandInputWrapper.slideDown(200); // Use slideDown for a smooth effect
        } else {
            // If stock/empty option is selected, hide the brand input and clear its value
            brandInputWrapper.slideUp(200, function() {
                 // Clear the input value *after* the slide animation completes
                 $(this).find('input[type="text"]').val('');
            });
        }
    }

    // --- Event Listener for existing category dropdowns ---
    // Use event delegation on a static parent for potentially loaded saved data later
    // Note: This assumes the structure generated by the PHP v0.1.4 (or later v0.1.8)
    $('.modification-categories').on('change', 'select.part-select', function() {
        toggleBrandInput(this);
    });

    // --- Initial check for pre-selected values (for saved data) ---
    // Run this check when the page loads to handle saved selections (will do nothing until loading is implemented)
    $('.modification-categories select.part-select').each(function() {
        toggleBrandInput(this);
    });

    // --- Event Listener for adding custom parts ---
    $('#add-custom-part-button').on('click', function() {
        const customPartsContainer = $('#custom-parts-list');
        const currentCustomPartsCount = customPartsContainer.children('li.custom-part-item').length;

        if (currentCustomPartsCount >= maxCustomParts) {
            alert('You have reached the maximum limit of ' + maxCustomParts + ' custom parts.');
            return; // Stop if limit is reached
        }

        // Create unique IDs/names for the new fields using the current count
        const newIndex = currentCustomPartsCount;

        // HTML for the new custom part entry row
        // Ensure this HTML structure matches what the PHP generates for saved custom parts later
        const newPartHtml = `
            <li class="custom-part-item" style="display: none;"> <div class="custom-part-inputs">
                    <label for="custom_part_name_${newIndex}">Part Name:</label>
                    <input type="text" id="custom_part_name_${newIndex}" name="custom_part_name[${newIndex}]" placeholder="e.g., Custom Strut Brace" required>

                    <label for="custom_part_details_${newIndex}">Brand / Details:</label>
                    <input type="text" id="custom_part_details_${newIndex}" name="custom_part_details[${newIndex}]" placeholder="e.g., UltraRacing">
                </div>
                <button type="button" class="remove-custom-part" title="Remove this part">&times;</button>
            </li>
        `;

        // Append the new HTML and fade it in
        $(newPartHtml).appendTo(customPartsContainer).fadeIn(300);
    });

    // --- Event Listener for removing custom parts (using event delegation) ---
    $('#custom-parts-list').on('click', '.remove-custom-part', function() {
        // Ask for confirmation before removing
        if (confirm('Are you sure you want to remove this custom part?')) {
            $(this).closest('li.custom-part-item').fadeOut(300, function() {
                $(this).remove(); // Remove the list item after fade out
            });
        }
    });

});

jQuery(document).ready(function($) {
    // ***** NEW: Handle Form Submission via AJAX *****
    $('#build-list-form').on('submit', function(e) {
        e.preventDefault(); // Prevent traditional form submission

        const form = $(this);
        // const formData = form.serialize(); // Old way
        const saveButton = form.find('button[type="submit"]');
        const originalButtonText = saveButton.text();

        // build a proper JS object (handles nested arrays cleanly)
        const data = {
          action: 'myddpc_save_build_list',
          myddpc_save_build_nonce: myddpc_build_list_settings.save_nonce,
          garage_entry_id: form.find('input[name="garage_entry_id"]').val(),
          build_type: form.find('#build-type').val(),
          part_category: {},
          custom_part_name: [],
          custom_part_details: []
        };
        // collect each category
        form.find('.modification-categories .category-item').each(function(){ // Ensured selector targets items within .modification-categories
          const slug = $(this).data('category');
          if (slug) { // Ensure slug exists
            data.part_category[slug] = {
              part: $(this).find('select.part-multiselect').val() || [],
              // Assuming brand input name might be part_category[SLUG_OR_ID][brand] or similar.
              // The diff used 'modifications['+slug+'][brand]'. If your PHP name is different, this needs adjustment.
              // For now, using a more generic selector within the item, assuming one brand input.
              // If PHP output is name="part_category[NUMERIC_ID][brand]", this won't pick it up by slug directly.
              // The diff's selector was: $(this).find('input[name^="modifications['+slug+'][brand]"]').val() || ''
              // Sticking to the diff's provided selector for brand:
              brand: $(this).find('input[name^="modifications['+slug+'][brand]"]').val() || $(this).find('.brand-input-wrapper input[type="text"]').val() || ''
            };
          }
        });
        // collect custom parts
        form.find('#custom-parts-list .custom-part-item').each(function(){
          data.custom_part_name.push(
            $(this).find('input[name^="custom_part_name"]').val()
          );
          data.custom_part_details.push(
            $(this).find('input[name^="custom_part_details"]').val()
          );
        });

        console.log("Saving build list with data:", data);

        // Optional: Add a visual indicator (e.g., disable button, show spinner)
        saveButton.prop('disabled', true).text('Saving...');
        // Consider adding a status message div

        $.ajax({
          url: myddpc_build_list_settings.ajax_url,
          method: 'POST',
          data: data,
          success: function(response) {
            console.log("Save response:", response);
            if (response.success) {
                // Success: Show a temporary success message
                saveButton.text('Saved!').css('background-color', '#28a745'); // Green indication
                // Optional: Display message in a status div
                // $('#save-status-message').text(response.data.message).css('color', 'green').show();

                setTimeout(function() {
                    saveButton.prop('disabled', false).text(originalButtonText).css('background-color', ''); // Restore button
                    // $('#save-status-message').hide();
                }, 2000); // Restore after 2 seconds
            } else {
                // Error: Show error message
                saveButton.prop('disabled', false).text(originalButtonText).css('background-color', ''); // Restore button
                alert('Error saving build list: ' + (response.data ? response.data.message : 'Unknown error'));
                // Optional: Display message in a status div
                // $('#save-status-message').text('Error: ' + (response.data.message || 'Unknown error')).css('color', 'red').show();
            }
          },
          error: function(xhr, status, error) { // Matched existing .fail() arguments
            console.error("AJAX Save Error:", status, error, xhr);
            saveButton.prop('disabled', false).text(originalButtonText).css('background-color', ''); // Restore button
            alert('AJAX error saving build list. Please try again.');
            // Optional: Display message in a status div
            // $('#save-status-message').text('AJAX Error. Please try again.').css('color', 'red').show();
          }
        });
    });
     // ***** END NEW AJAX SUBMISSION *****
});

jQuery(document).ready(function($){
  // Initialize Select2 if it's loaded, otherwise fallback to native
  if ( $.fn.select2 ) {
    $('.part-multiselect').select2({
      width: '100%',
      placeholder: function(){ // Changed to a function as per diff
        return $(this).data('placeholder') || 'Select…';
      },
      dropdownAutoWidth: true
    });
  } else {
    console.warn('Select2 not loaded; using native multi-select.');
  }

  console.log(
    'Available category slugs:',
    $('.modification-categories .category-item')
      .map((i,el)=> $(el).data('category'))
      .get()
  );

  // Build‑Type → category slugs map
  const typeMap = {
    daily: [
      'engine-ecu-tune',
      'forced-induction-turbo-supercharger',
      'intake',
      'exhaust',
      'fuel-system',
      'drivetrain-transmission-clutch-differential',
      'suspension-coilovers-springs-shocks-sway-bars',
      'brakes-rotors-pads-calipers-lines',
      'wheels',
      'tires'
    ],
    track: [
      'engine-ecu-tune',
      'forced-induction-turbo-supercharger',
      'intake',
      'exhaust',
      'fuel-system',
      'brakes-rotors-pads-calipers-lines',
      'suspension-coilovers-springs-shocks-sway-bars',
      'wheels',
      'tires'
    ],
    drift: [
      'engine-ecu-tune',
      'drivetrain-transmission-clutch-differential',
      'suspension-coilovers-springs-shocks-sway-bars',
      'wheels',
      'tires'
    ],
    offroad: [
      'suspension-coilovers-springs-shocks-sway-bars',
      'tires'
    ]
  };

  // Show/hide category cards on Build‑Type change
  $('#build-type').on('change', function(){
    const t = $(this).val();
    const $items = $('.modification-categories .category-item');
    if ( t === 'custom' ) {
      $items.fadeIn(); // Return was removed to ensure it always executes if custom
      return; // Explicit return after fadeIn for custom
    }
    $items.hide(); // Hide all first
    (typeMap[t]||[]).forEach(function(slug){
      // Corrected data-attribute selector
      $items.filter(`[data-category="${slug}"]`).fadeIn();
    });
  }).trigger('change'); // Trigger change on load to apply initial filtering

  // on page‑load default to Custom (show all) then apply filter
  $('#build-type').val('custom').trigger('change');

  // 3c) Hide/show based on actual car specs (from previous version, kept as it might be relevant)
  if (typeof myddpc_build_list_settings !== 'undefined' && myddpc_build_list_settings.car_specs) {
    const specs = myddpc_build_list_settings.car_specs;
    if (!specs.turbo) {
      $('.category-item[data-category="turbo-upgrades"]').hide(); // Assuming slug "turbo-upgrades"
    }
    if (specs.transmission !== 'manual') {
      $('.category-item[data-category="clutch"]').hide(); // Assuming slug "clutch"
    }
  }
  // …add more rules as needed…

});